generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  user_name  String   @unique
  password   String
  email      String? 
  role       UserRole

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  userOnShops UserOnShop[]
}

model UserOnShop {
  userId Int
  shopId Int
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@id([userId, shopId])
}


model Shop {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  status          ShopStatus
  address         String
  thumbnail       String
  table_quantity  Int
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  created_by      Int?
  updated_by      Int?

  userOnShops     UserOnShop[]
  categories      ProductCategory[]
  tables          Table[]
}

model Table {
  id              Int                  @id @default(autoincrement())
  name            String
  order_number    String
  qr_code         String

  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  created_by      Int?
  updated_by      Int?

  shop_id         Int
  shop            Shop @relation(fields: [shop_id], references: [id])

  cart            Cart? // Dùng '?' để cho phép Cart là null nếu Table chưa có Cart
}

model Cart {
  id              Int                  @id @default(autoincrement())
  total_amout Decimal

  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  created_by      Int?
  updated_by      Int?

  table_id     Int      @unique
  table        Table    @relation(fields: [table_id], references: [id])
  
  orders          Order[]
}

model Order {
  id              Int                  @id @default(autoincrement())
  note            String?

  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  created_by      Int?
  updated_by      Int?

  cart_id         Int
  cart            Cart @relation(fields: [cart_id], references: [id])

  items           OrderItem[]
}

model OrderItem {
  id              Int                  @id @default(autoincrement())
  note            String?

  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  created_by      Int?
  updated_by      Int?

  // Quan hệ n-1: Mỗi OrderItem thuộc về một Order
  order_id        Int
  order           Order                @relation(fields: [order_id], references: [id])

  // Quan hệ n-1: Mỗi OrderItem tham chiếu đến một Product gốc
  // Một Product có thể được mua trong nhiều OrderItem khác nhau
  product_id      Int
  product         Product              @relation(fields: [product_id], references: [id])
}

model ProductCategory {
  id              Int                  @id @default(autoincrement())
  name            String
  description     String

  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  created_by      Int?
  updated_by      Int?

  shops           Shop[]
  products        Product[] 
}


model Product {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?  
  price           Decimal  
  image           String?  
  is_available    Boolean  @default(true) 

  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  created_by      Int?
  updated_by      Int?

  category_id     Int
  category        ProductCategory @relation(fields: [category_id], references: [id])

  // Quan hệ 1-n: Một Product có thể xuất hiện trong nhiều OrderItem
  orderItems      OrderItem[]
}






